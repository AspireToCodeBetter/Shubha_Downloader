/*****************************
 *
 *Author:JAYANT PATIL
 *COMPANY NAME XNet Inc,Pune.
 *last modified date:08-jan-2013
 *
 *
 *
 *Description:
 *This will process BSE Equity data
 *
 *variables :
 *count --->contains array of date in which we take one date process files regarding to that
 *n     --->it is a counter variable
 *baseurl-->it contians all url for nse equity
 *downloadpath---> it contain download path of file for processing
 *unzippath  ----> it contains unzip folder path
 *outputpah  ----> it containds output older path
 *
 *
 *copyright 2013
 ******************************/

/********************************
	<Shubha Downloader, It downloads end of day pricing data from publicly available sites and converts it different formats....>
    Copyright (C) 2013 Shubhalabha.in

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>
***********************************/

function process_bseequity(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)
{

//outputpath=outputpath.replace(/NCDEX/g,'bse');
var outputpath1=outputpath
//console.log('output path eq-'+outputpath1);
//outputpath=outputpath.replace(/reports/g,'bse');
var mon=count[n].split('-')[0];
var m=count[n].split('-')[1];
var d=count[n].split('-')[2];
var yy=count[n].split('-')[3];
var y=yy.substr(2,2);

var fs = require('fs');
    var csv = require('ya-csv');
    var async = require('async');

    //var writeFileStream = fs.createWriteStream('./tempData/output.txt',{flag:'a',encoding:'utf-8'});

    try{
Ext.getCmp('pbar3').updateProgress(0.05);
        async.parallel({

           data1 : function(callback){
                if (fs.existsSync(unzippath+'EQ'+d+m+y+'.CSV')) {
				Ext.getCmp('pbar3').updateText('Processing EQ'+d+m+y+'.CSV');
                    fs.readFile(unzippath+'EQ'+d+m+y+'.CSV','utf-8', function(err, data){
                   if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                   callback(err, data);
                });
                }else
                {
                    // Here readdir's functionaliity has no use. It is written for only to send
                    // '0' data in its callback function because we cannot call "callback(err, data);"
                    // function out side a callback function
                    fs.readdir('./', function(err, files){
						if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                    callback(err,'0');
                    });
                }
           },

           data2 : function(callback){
               if (fs.existsSync(unzippath+'SCBSEALL'+d+m+'.txt')) {
                    fs.readFile(unzippath+'SCBSEALL'+d+m+'.txt','utf-8', function(err, data){
						if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                        //console.log('\n Reading sec_list.csv');
                        callback(err, data);
                    });
                }else
                {
                    // Here readdir's functionaliity has no use. It is written for only to send
                    // '0' data in its callback function because we cannot call "callback(err, data);"
                    // function out side a callback function
                    fs.readdir('./', function(err, files){
						if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                    callback(err,'0');
                    });
                }

           }
           
        }, function(err, result){

            if(err) throw err;


 // Read BSE eqity without taking 1st row ie header
if (fs.existsSync(unzippath+'EQ'+d+m+y+'.CSV')) {
    Ext.getCmp('pbar3').updateProgress(0.1);
	Ext.getCmp('pbar3').updateText('Processing EQ'+d+m+y+'.CSV');
            var arrRow = new Array();
            arrRow = result['data1'].split('\n');

            var arrFileData = new Array();

            for(var i=0 ; i<arrRow.length-1;i++)
            {
                var tempArr = arrRow[i].split(',');
                    arrFileData.push(tempArr);
                         
            }


// Read unzippath+'SCBSEALL'+d+m+'.txt'
        if (fs.existsSync(unzippath+'SCBSEALL'+d+m+'.txt')) {
            var arrRow1 = new Array();
            arrRow1 = result['data2'].split('\n');

            var arrFileData1 = new Array();

            for(i=0 ; i<arrRow1.length-1 ;i++)
            {
                var tempArr1 = arrRow1[i].split('|');
                arrFileData1.push(tempArr1);
            }

            for(i=0; i<arrFileData.length; i++)
            {

                    for(var j=1; j<arrFileData1.length; j++)
                    {
                        if(arrFileData[i][0].toString()==arrFileData1[j][1].toString())
                        {
                            arrFileData[i][14] = arrFileData1[j][2];
                        }
                    }
            }
        }
// add '-' where cell of company name col not have value

           for(i=0; i<arrFileData.length; i++)
           {
                if(arrFileData[i][14] == null || arrFileData[i][14] == "")
                {
                    arrFileData[i][14] = '0';
                  //console.log('i ='+i+' '+arrFileData[i][13]);
                }
           }

//processing all data here

            var arrFinal = new Array();
            var arrHeader = ['TICKER','NAME','DATE','OPEN','HIGH','LOW','CLOSE','VOLUME','OPENINT'];
			fs.writeFile(outputpath1+'BSE_Cash_Market_EQ'+d+m+y+'.CSV', arrHeader+'\n', function(err){

                    if(err)
                    {console.log(err);}                    //creation of final array data for output file
					
            for(var i=1; i<arrFileData.length; i++)
            {
                
				fs.appendFileSync(outputpath1+'BSE_Cash_Market_EQ'+d+m+y+'.CSV', arrFileData[i][0]+','+arrFileData[i][1].toString().trim()+','+yy+m+d+','+arrFileData[i][4]+','+arrFileData[i][5]+','+arrFileData[i][6]+','+arrFileData[i][7]+','+arrFileData[i][11]+','+arrFileData[i][14]+'\n','UTF-8', function(err){
                
                    if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                });
				
            }

			
                });



}
        });



    }catch(err){
       if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
    }
	
						
    Ext.getCmp('pbar3').updateText('Processing EQ'+d+m+y+'.CSV completed');
    document.getElementById("om").innerHTML+="<br/>EQ"+d+m+y+".CSV is processed..";
    addlog(logpath, 'EQ'+d+m+y+'.CSV is processed..');
    n++;
        if(count.length>n)
        {
        loadprogressbar();
        setTimeout(function (){process_bseequity(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)},1000);
        document.getElementById("om").innerHTML+='..';}
		else{
		loadprogressbar();
		/************/
		visit('bsecm.html');
		/***************/
		sn++;
		callfun(count,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn);

	}

}
