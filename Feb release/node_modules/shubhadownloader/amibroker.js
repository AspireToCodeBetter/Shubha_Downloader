/*****************************
 *
 *Author:JAYANT PATIL
 *COMPANY NAME XNet Inc,Pune.
 *last modified date:04-jan-2013
 *
 *
 *
 *Description:
 *This will process NSE future file and generate output file
 *
 *variables :
 *count --->contains array of date in which we take one date process files regarding to that
 *n     --->it is a counter variable
 *baseurl-->it contians all url for nse equity
 *downloadpath---> it contain download path of file for processing
 *unzippath  ----> it contains unzip folder path
 *outputpah  ----> it containds output older path
 *
 *
 *copyright 2013
 ******************************/
/********************************
	<Shubha Downloader, It downloads end of day pricing data from publicly available sites and converts it different formats....>
    Copyright (C) 2013 Shubhalabha.in

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>
***********************************/

function process_amibroker(outputpath,m,baseurl)
{
	//console.log('\n ami 1'+baseurl);
	
	var outputpath_amibriker=outputpath;
        outputpath_amibriker = outputpath_amibriker.replace(/std_csv/g,'amibroker');
        
	var fs = require('fs');
	fs.readdir(outputpath,function(err, files)
	{
		if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
			//console.log('\n ami 2'+baseurl);
		startAmibroker(files, 0, outputpath,outputpath_amibriker,m,baseurl);
			
	});
	
}


function startAmibroker(files, n, outputpath, outputpath_amibriker,m,baseurl)
{
//console.log('\n ami 3'+baseurl);
    	var fs = require('fs');
   // console.log(outputpath_amibriker);
	try
	{
		var async = require('async');
                Ext.getCmp('pbar3').updateText('Processing '+files[n]);
                Ext.getCmp('pbar3').updateProgress(0.03);
        async.parallel
		({
               data1 : function(callback){
                    if (fs.existsSync(outputpath+files[n])) {
						
                        fs.readFile(outputpath+files[n],'utf-8', function(err, data){
						if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                        //console.log('\n Reading fo.csv');
                        callback(err, data);
                    });
                    }else
                    {
                        // Here readdir's functionaliity has no use. It is written for only to send
                        // '0' data in its callback function because we cannot call "callback(err, data);"
                        // function out side a callback function
                        fs.readdir("./", function(err, files){
						if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                            callback(err,'0');
                        });
                    }
               }
        }, function(err, result)
		{
			
			if(err){document.getElementById("om").innerHTML+="<br/>"+err;}

			if (fs.existsSync(outputpath+files[n]) && !fs.existsSync(outputpath_amibriker+files[n]))
                        //if (fs.existsSync(outputpath+files[n]) && (!fs.existsSync(outputpath_amibriker+files[n])|| files[n].search("yahoort")==0|| files[n].search("yahoo_eod")==0|| files[n].search("Yahoo_Fundamental")==0|| files[n].search("NSE_Indices_nseindex")==0|| files[n].search("NSE_Advance_D_nsead")==0|| files[n].search("MCX_Indices_MCXSpotIndex")==0|| files[n].search("MCX_Indices_MCXIndex")==0|| files[n].search("BSE_Indices_bseindex")==0))
			{
				Ext.getCmp('pbar3').updateText('Processing '+files[n]);
				var arrRow = new Array();
				arrRow = result['data1'].split('\n');
				
				var arrFileData = new Array();

				// arrRow.lenght-3 is for last 3 lines of no use in file
				for(var i=0 ; i<arrRow.length;i++)
				{
						var tempArr = arrRow[i].split(',');
						arrFileData.push(tempArr);
				}
				
				
				for(i=1 ; i<arrFileData.length;i++)
				{
					fs.appendFileSync(outputpath_amibriker+files[n], arrFileData[i]+'\n','utf-8', function (err) {
						if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
					});
				}

			}
                        else if(files[n].search("yahoort")==0|| files[n].search("yahoo_eod")==0|| files[n].search("Yahoo_Fundamental")==0|| files[n].search("NSE_Indices_nseindex")==0|| files[n].search("NSE_Advance_D_nsead")==0|| files[n].search("MCX_Indices_MCXSpotIndex")==0|| files[n].search("MCX_Indices_MCXIndex")==0|| files[n].search("BSE_Indices_bseindex")==0)
                            {
                                Ext.getCmp('pbar3').updateText('Processing '+files[n]);
				var arrRow1 = new Array();
				arrRow1 = result['data1'].split('\n');

				var arrFileData1 = new Array();

				// arrRow.lenght-3 is for last 3 lines of no use in file
				for(var i=0 ; i<arrRow1.length;i++)
				{
						var tempArr1 = arrRow1[i].split(',');
						arrFileData1.push(tempArr1);
				}

                                for(var i=1 ; i<arrFileData1.length-1;i++)
				{
					if(i > 1)
					{
						fs.appendFileSync(outputpath_amibriker+files[n], arrFileData1[i]+'\n','utf-8', function (err) {
							if (err) throw err;
						});
					}else
					{
						fs.writeFileSync(outputpath_amibriker+files[n], arrFileData1[i]+'\n','utf-8', function (err) {
							if (err) throw err;
						});

					}
				}


						Ext.getCmp('pbar3').updateText('Processing '+files[n]+' completed');
                            }
			n++;
                        
			if(files.length > n)
			{
									
				loadprogressbar();
                                setTimeout(function(){startAmibroker(files, n, outputpath, outputpath_amibriker,m, baseurl)},1000);
			}else
			{	
				loadprogressbar();
                                document.getElementById("om").innerHTML+="<br/>Amibroker is finished";
                                Ext.getCmp('pbar3').updateProgress(0);
                                m++;
								//console.log('\n ami 4'+baseurl);
                                processfun(outputpath,m,baseurl);//calling back to function....
                                

			}
		});
	}
	catch(err)
	{
		document.getElementById("om").innerHTML+="<br/>"+err;
	}
        Ext.getCmp('pbar3').updateText('Processing '+files[n]+' completed');
        document.getElementById("om").innerHTML+="<br/>Amibroker "+files[n]+" is processed..";
	
		
}


