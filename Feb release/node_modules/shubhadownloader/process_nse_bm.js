/*****************************
 *
 *Author:JAYANT PATIL
 *COMPANY NAME XNet Inc,Pune.
 *last modified date:01-jan-2013
 *
 *
 *
 *Description:
 *
 *
 *variables :
 *count --->contains array of date in which we take one date process files regarding to that
 *n     --->it is a counter variable
 *baseurl-->it contians all url for nse equity
 *downloadpath---> it contain download path of file for processing
 *unzippath  ----> it contains unzip folder path
 *outputpah  ----> it containds output older path
 *
 *
 *copyright 2013
 ******************************/
/********************************
	<Shubha Downloader, It downloads end of day pricing data from publicly available sites and converts it different formats....>
    Copyright (C) 2013 Shubhalabha.in

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>
***********************************/


function process_nse_Bm(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)
{
try{
outputpath=outputpath.replace(/std_csv/g,'reports');
var mon=count[n].split('-')[0];
var m=count[n].split('-')[1];
var d=count[n].split('-')[2];
var yy=count[n].split('-')[3];
var y=yy.substr(2,2);

var fs = require('fs');
    var csv = require('ya-csv');
    var async = require('async');

    //var writeFileStream = fs.createWriteStream('./tempData/output.txt',{flag:'a',encoding:'utf-8'});

    try{

        async.parallel({

           data1 : function(callback){
                if (fs.existsSync(unzippath+'Bm'+d+m+y+'.txt')) {
					Ext.getCmp('pbar3').updateText('Processing Bm'+d+m+y+'.txt');
					Ext.getCmp('pbar3').updateProgress(0.12);
                    fs.readFile(unzippath+'Bm'+d+m+y+'.txt','utf-8', function(err, data){
					if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                   
                   callback(err, data);
                });
                }else
                {
                    // Here readdir's functionaliity has no use. It is written for only to send
                    // '0' data in its callback function because we cannot call "callback(err, data);"
                    // function out side a callback function
                    fs.readdir(downloadpath, function(err, files){
					if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                    callback(err,'0');
                    });
                }
           }

        }, function(err, result){
		
			
            if(err){document.getElementById("om").innerHTML+="<br/>"+err;}

		
 // Read bhavcopy without taking 1st row ie header
if (fs.existsSync(unzippath+'Bm'+d+m+y+'.txt')) {
Ext.getCmp('pbar3').updateText('Processing Bm'+d+m+y+'.txt');
			var step = require('step');
            var arrRow = new Array();
            arrRow = result['data1'].split('\n');

            var arrFileData = new Array();

            for(var i=0 ; i<arrRow.length-2;i++)
            {
                if(arrRow[i] != "" || arrRow[i] != null)
				{	
					var tempArr = arrRow[i].split(',');
					arrFileData.push(tempArr);
				}
            }
			
			
			
			if(count.length-2 == n)
			{
				step(
					function zero(){
						
						fs.appendFileSync(outputpath+'nseannouncements.csv', arrFileData[0]+'\n','utf-8',  function(err){
							if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
						});
						return this;
					},
					function one(){
											
							fs.appendFileSync(outputpath+'nseannouncements.csv','\n','utf-8',  function(err)
							{
								if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						return this;
					},
					function two(){
						
							fs.appendFileSync(outputpath+'nseannouncements.csv','For date : '+d+'/'+m+'/'+y+'\n','utf-8',  function(err)
							{
								if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						return this;
					},
					
					function four(){
						
						for(i=1 ; i<arrFileData.length;i++)
						{
								fs.appendFileSync(outputpath+'nseannouncements.csv', arrFileData[i]+'\n','utf-8',  function(err){
							if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						}
						return this;
					}
					
				);
				
						
				Ext.getCmp('pbar3').updateText('Processing bm'+d+m+y+'.csv completed');
				
			}else
			{

				
				step(
					function one(){
						
							fs.appendFileSync(outputpath+'nseannouncements.csv','\n','utf-8',  function(err)
							{
								if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						return this;
					},
					function two(){
							fs.appendFileSync(outputpath+'nseannouncements.csv','\n','utf-8',  function(err)
							{
								if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						return this;
					},
					
					function four(){
							fs.appendFileSync(outputpath+'nseannouncements.csv','For date : '+d+'/'+m+'/'+y+'\n','utf-8',  function(err)
							{
								if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						return this;
					},
					function three(){
						for(i=1 ; i<arrFileData.length;i++)
						{	
							fs.appendFileSync(outputpath+'nseannouncements.csv', arrFileData[i]+'\n','utf-8',  function(err){
								if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
							});
						}
						
						return this;
					}
				);

				Ext.getCmp('pbar3').updateText('Processing bm'+d+m+y+'.csv completed');
			}
			
			
			
			
			
//write array to output file			
			
			
			/*for(var i=0 ; i<arrFileData.length;i++)
            {
				fs.appendFile(outputpath+'NSE_corporate_actions', arrFinal[i]+'\n', function(err){
                    if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
                });
			}*/

}
        });



    }catch(err){
      if(err){document.getElementById("om").innerHTML+="<br/>"+err;}
    }

    document.getElementById("om").innerHTML+='<br/>Bm'+d+m+y+'.txt is processed..';
    addlog(logpath, 'Bm'+d+m+y+'.txt is processed..');
    n--;
        if(n>=0)
        {
			loadprogressbar();
                        setTimeout(function (){process_nse_Bm(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)}, 2000);
			//setTimeout(function (){process_nse(count,n,baseurl,downloadpath,unzippath,outputpath)}, 5000);
			document.getElementById("om").innerHTML+='..';
         }
else{
//$("#p3").hide();
//document.getElementById("om").innerHTML+='<br/><font color=green>Finished</font>';
//setTimeout(function(){process_nsefuture(count,0,baseurl,downloadpath,unzippath,outputpath);}, 2000);
process_nse_ffix(count,count.length-1,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn);
}
}catch(err){console.log(err);process_nse_ffix(count,count.length-1,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn);}
}

// return numeric month for symbolic month arg

