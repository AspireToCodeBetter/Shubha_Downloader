/***********************
Company Name:XNet Inc.
Last Modified Date:1-Jan-2013
Author: Prashant Shilimkar
Description :This page will create output bhavcopy file from downloaded bhav.csv, cm.csv, MTO.dat and sec_list.csv files.

*********************/
/********************************
	<Shubha Downloader, It downloads end of day pricing data from publicly available sites and converts it different formats....>
    Copyright (C) 2013 Shubhalabha.in

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program. If not, see <http://www.gnu.org/licenses/>
***********************************/
function process_nse_etf(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)
{

    try{
	
        outputpath=outputpath;
        var mon=count[n].split('-')[0];
        var m=count[n].split('-')[1];
        var d=count[n].split('-')[2];
        var yy=count[n].split('-')[3];
        var y=yy.substr(2,2);
        var fs = require('fs');
        var csv = require('ya-csv');
        var async = require('async');
        //var path = require('./node_modules/path');

        //var writeFileStream = fs.createWriteStream('./tempData/output.txt',{flag:'a',encoding:'utf-8'});



        async.parallel({
            data1 : function(callback){
                if (fs.existsSync(unzippath+'etf'+d+m+y+'.csv')) {
                    Ext.getCmp('pbar3').updateText('Processing etf'+d+m+y+'.csv');
                    fs.readFile(unzippath+'etf'+d+m+y+'.csv','utf-8', function(err, data){
                        if(err)
                        {
                            document.getElementById("om").innerHTML+="<br/>An error occured while reading "+unzippath+"etf"+d+m+y+".csv";
                        }
                        //                        console.log('\n Reading etf191212.csv');
                        callback(err, data);
                    });
                }else
                {
                    // Here readdir's functionaliity has no use. It is written for only to send
                    // '0' data in its callback function because we cannot call "callback(err, data);"
                    // function out side a callback function
                    fs.readdir(downloadpath, function(err, files){
                        if(err)
                        {
                            document.getElementById("om").innerHTML+="<br/>An error occured while reading "+unzippath+"etf"+d+m+y+".csv";
                        }

                        callback(err,'0');
                    });
                }
            }
        }, function(err, result){

            if(err)
            {
                document.getElementById("om").innerHTML+="<br/>An error occured while processing "+unzippath+"etf"+d+m+y+".csv";
            }

            //console.log(unzippath+'etf'+d+m+y+'.csv');
            if (fs.existsSync(unzippath+'etf'+d+m+y+'.csv')) {
                Ext.getCmp('pbar3').updateText('Processing etf'+d+m+y+'.csv');
                var arrRow = new Array();
                arrRow = result['data1'].split('\n');

                var arrFileData = new Array();

                // arrRow.lenght-3 is for last 3 lines of no use in file
                for(var i=0 ; i<arrRow.length;i++)
                {
                    var tempArr = arrRow[i].split(',');
                    arrFileData.push(tempArr);
                }

                var filename = outputpath+'NSE_ETF_etf'+d+m+y+'.csv';
                var header='TICKER,NAME,DATE,OPEN,HIGH,LOW,CLOSE,VOLUME,OPENINT';
                var date=yy+m+d;
                if(!fs.existsSync(filename)){
                    fs.writeFile(filename, header+'\n', function (err)

                    {
                            if(err)
                            {
                                document.getElementById("om").innerHTML+="<br/>An error occured while processing "+unzippath+"etf"+d+m+y+".csv";
                            }

                            //processing actual data
                            for(var i=1 ; i<arrFileData.length-1;i++)
                            {
                                fs.appendFileSync(filename, arrFileData[i][2]+','+arrFileData[i][3]+','+date+','+arrFileData[i][5].toString().trim()+','+arrFileData[i][6].toString().trim()+','+arrFileData[i][7].toString().trim()+','+arrFileData[i][8].toString().trim()+','+arrFileData[i][10].toString().trim()+','+'0'+'\n','UTF-8', function (err) {
                                    if(err)
                                    {
                                        document.getElementById("om").innerHTML+="<br/>An error occured while processing "+unzippath+"etf"+d+m+y+".csv";
                                    }

                                //console.log('etf processsed!');
                                });
                            }
                        });

                }
            }
        });
    
	
						
        //Ext.getCmp('pbar3').updateText('Processing etf'+d+m+y+'.csv completed');
        document.getElementById("om").innerHTML+='<br/>etf'+d+m+y+'.csv is processed';
        addlog(logpath, 'etf'+d+m+y+'.csv is processed');
        n++;
        if(count.length>n)
        {
            loadprogressbar();
            setTimeout(function (){
                process_nse_etf(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)
                }, 1000);
            //setTimeout(function (){process_nse(count,n,baseurl,downloadpath,unzippath,outputpath)}, 5000);
            document.getElementById("om").innerHTML+='..';
        }
        else{
            loadprogressbar();
            sn++;
            callfun(count,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn);

        }
    }
    catch(err)
    {
        document.getElementById("om").innerHTML+="<br/>An error occured while processing "+unzippath+"etf"+d+m+y+".csv";
        n++;
        if(count.length>n)
        {
            loadprogressbar();
            setTimeout(function (){
                process_nse_etf(count,n,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn)
                }, 1000);
            //setTimeout(function (){process_nse(count,n,baseurl,downloadpath,unzippath,outputpath)}, 5000);
            document.getElementById("om").innerHTML+='..';
        }
        else{
            loadprogressbar();
            sn++;
            callfun(count,baseurl,downloadpath,unzippath,outputpath,logpath,fromd,tod,sn);

        }
    }
    }

function monthDiff(d1, d2) {
    try
    {
        var months;
        months = (d2.getFullYear() - d1.getFullYear()) * 12;
        months -= d1.getMonth() + 1;
        months += d2.getMonth();
        return months+1;
    }catch(err)
    {
        console.log(err);
    }
}